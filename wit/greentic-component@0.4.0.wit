package greentic:component@0.4.0;

/// Cooperative control-plane hooks surfaced to components.
interface control {
  /// Returns true when the host requests cancellation.
  should-cancel: func() -> bool;

  /// Yields execution back to the host.
  yield-now: func();
}

/// Component interface for greentic component version 0.4.0.
interface node {
  type json = string;

  /// Captures tenant-scoped identity and request affordances.
  record tenant-ctx {
    tenant: string,
    team: option<string>,
    user: option<string>,
    trace-id: option<string>,
    correlation-id: option<string>,
    deadline-unix-ms: option<u64>,
    attempt: u32,
    idempotency-key: option<string>,
  }

  /// Provides execution context for a single flow node invocation.
  record exec-ctx {
    tenant: tenant-ctx,
    flow-id: string,
    node-id: option<string>,
  }

  /// A structured error code propagated back to the orchestrator.
  record node-error {
    code: string,
    message: string,
    retryable: bool,
    backoff-ms: option<u64>,
    details: option<json>,
  }

  /// Result of an invoke operation.
  variant invoke-result {
    ok(json),
    err(node-error),
  }

  /// Streaming events emitted when executing invoke-stream.
  variant stream-event {
    data(json),
    progress(u8),
    done,
    error(string),
  }

  /// Signals lifecycle success without carrying additional data.
  enum lifecycle-status {
    ok,
  }

  /// Returns a JSON manifest describing the component's capabilities.
  get-manifest: func() -> json;

  /// Optional lifecycle hook when the component starts.
  on-start: func(ctx: exec-ctx) -> result<lifecycle-status, string>;

  /// Optional lifecycle hook when the component stops.
  on-stop: func(ctx: exec-ctx, reason: string) -> result<lifecycle-status, string>;

  /// Invokes an operation with execution context and JSON payload.
  invoke: func(ctx: exec-ctx, op: string, input: json) -> invoke-result;

  /// Invokes an operation that emits a bounded list of streaming events.
  invoke-stream: func(ctx: exec-ctx, op: string, input: json) -> list<stream-event>;
}

world component {
  import control;
  export node;
}
