package greentic:component@0.4.0;

type json = string;

/// Captures tenant-scoped identity and request affordances.
record tenant_ctx {
  tenant: string,
  team: option<string>,
  user: option<string>,
  trace_id: option<string>,
  correlation_id: option<string>,
  deadline_unix_ms: option<u64>,
  attempt: u32,
  idempotency_key: option<string>,
}

/// Provides execution context for a single flow node invocation.
record exec_ctx {
  tenant: tenant_ctx,
  flow_id: string,
  node_id: option<string>,
}

/// A structured error code propagated back to the orchestrator.
record node_error {
  code: string,
  message: string,
  retryable: bool,
  backoff_ms: option<u64>,
  details: option<json>,
}

/// Result of an invoke operation.
variant invoke_result {
  ok(json),
  err(node_error),
}

/// Streaming events emitted when executing invoke-stream.
variant stream_event {
  data(json),
  progress(u8),
  done,
  error(string),
}

/// Cooperative control-plane hooks surfaced to components.
interface control {
  /// Returns true when the host requests cancellation.
  should-cancel: func() -> bool

  /// Yields execution back to the host.
  yield-now: func()
}

/// Component interface for greentic component version 0.4.0.
interface node {
  /// Returns a JSON manifest describing the component's capabilities.
  get-manifest: func() -> json

  /// Optional lifecycle hook when the component starts.
  on-start: func(ctx: exec_ctx) -> result<(), string>

  /// Optional lifecycle hook when the component stops.
  on-stop: func(ctx: exec_ctx, reason: string) -> result<(), string>

  /// Invokes an operation with execution context and JSON payload.
  invoke: func(ctx: exec_ctx, op: string, input: json) -> invoke_result

  /// Invokes an operation that emits a bounded list of streaming events.
  invoke-stream: func(ctx: exec_ctx, op: string, input: json) -> list<stream_event>
}
