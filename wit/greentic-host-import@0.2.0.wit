package greentic:host-import@0.2.0;

interface imports {
  /// Supported clouds and platforms mirror the types-core package. Duplicated for independence.
  variant cloud { aws, gcp, azure, hetzner, local, other }
  variant platform { k8s, nomad, systemd, cfworkers, lambda, baremetal, other }

  type flow-id = string;
  type tenant-id = string;
  type team-id = string;
  type user-id = string;

  record deployment-ctx {
    cloud: cloud,
    region: option<string>,
    platform: platform,
    runtime: option<string>,
  }

  record tenant-ctx {
    tenant: tenant-id,
    team: option<team-id>,
    user: option<user-id>,
    deployment: deployment-ctx,
    trace-id: option<string>,
  }

  variant iface-error { invalid-arg, not-found, denied, unavailable, internal }

  record http-request {
    method: string,
    url: string,
    headers-json: option<string>,
    body: option<string>,
  }

  record http-response {
    status: u16,
    headers-json: option<string>,
    body: option<string>,
  }

  /// Secret management hook exposed by the host.
  secrets-get: func(key: string, ctx: option<tenant-ctx>) -> result<string, iface-error>;

  /// Telemetry emission hook.
  telemetry-emit: func(span-json: string, ctx: option<tenant-ctx>);

  /// Tool invocation hook for side-effecting operations.
  tool-invoke: func(
    tool: string,
    action: string,
    args-json: string,
    ctx: option<tenant-ctx>
  ) -> result<string, iface-error>;

  /// HTTP fetch helper for components that need outbound calls.
  http-fetch: func(req: http-request, ctx: option<tenant-ctx>)
    -> result<http-response, iface-error>;
}

world host-imports {
  import imports;
}
